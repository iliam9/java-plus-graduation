{
	"info": {
		"_postman_id": "3f1de811-657f-45f4-af91-1f105585b02a",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3829591"
	},
	"item": [
		{
			"name": "Добавление комментария несуществующим пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404); ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\" : \"Комментарий от несуществующего пользователя\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "10000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария на несуществующее событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"uid\", user.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\" : \"Комментарий на несуществующее событие\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments?eventId=10000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "10000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария автором события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"uid\", user.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "eventId",
						"value": "{{eid}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\" : \"Комментарий от автора события\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария неподтвержденным участником события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"uid\", user.id);",
							"",
							"        const author = await api.addUser(rnd.getUser());",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(author.id, rnd.getRequiredModerationEvent(category.id, true));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, user.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\" : \"Коментарий от неподтвержденного участника\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария на неопубликованное событие",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"uid\", user.id);",
							"",
							"        const author = await api.addUser(rnd.getUser());",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(author.id, rnd.getEvent(category.id));",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, user.id);",
							"        const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\" : \"Комментарий на неопубликованное событие\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария на событие",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"uid\", user.id);",
							"",
							"        const author = await api.addUser(rnd.getUser());",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(author.id, rnd.getRequiredModerationEvent(category.id, true));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, user.id);",
							"        const confirmedRequest = await api.acceptParticipationRequest(event.id, author.id, requestToJoin.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\" : \"Новый комментарий\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление несуществующего комментраия",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const author = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"authorId\", author.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, author.id);",
							"        if (event.requestModeration) {",
							"            const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);",
							"        }",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Обновление несуществующего комментария\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{authorId}}/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{authorId}}",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "100000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария не его автором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        const author = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"authorId\", user2.id);",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = false",
							"        let event = await api.addEvent(user.id, eventBody);",
							"        event = await api.publishEvent(event.id);",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, author.id);",
							"        const comment = await api.addComment(author.id, event.id, {\"text\": \"Новый комментарий\"});",
							"        ",
							"        pm.collectionVariables.set(\"commentId\", comment.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Комментарий, обновляемый не автором\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:authorId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":authorId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "authorId",
							"value": "{{authorId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария на событие",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const author = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"authorId\", author.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, author.id);",
							"        if (event.requestModeration) {",
							"            const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);",
							"        }",
							"        const comment = await api.addComment(author.id, event.id, {\"text\": \"Новый комментарий\"});",
							"        pm.collectionVariables.set(\"commentId\", comment.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Обновленный комментарий\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{authorId}}/comments/{{commentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{authorId}}",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление несуществующего комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const author = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"authorId\", author.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, author.id);",
							"        if (event.requestModeration) {",
							"            const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);",
							"        }",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{authorId}}/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{authorId}}",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "100000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария не его автором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"uid\", user.id);",
							"        const author = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"authorId\", author.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, author.id);",
							"        if (event.requestModeration) {",
							"            const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);",
							"        }",
							"        const comment = await api.addComment(author.id, event.id, {\"text\": \"Новый комментарий\"});",
							"        pm.collectionVariables.set(\"commentId\", comment.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments/{{commentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария на событие",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const author = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"authorId\", author.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, author.id);",
							"        if (event.requestModeration) {",
							"            const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);",
							"        }",
							"        const comment = await api.addComment(author.id, event.id, {\"text\": \"Новый комментарий\"});",
							"        pm.collectionVariables.set(\"commentId\", comment.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);  ",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{authorId}}/comments/{{commentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{authorId}}",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение неопубликованных комментариев",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const author = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"authorId\", author.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, author.id);",
							"        if (event.requestModeration) {",
							"            const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);",
							"        }",
							"        const comment = await api.addComment(author.id, event.id, {\"text\": \"Новый комментарий\"});",
							"        pm.collectionVariables.set(\"commentId\", comment.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление статуса у несуществующего комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const author = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"authorId\", author.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, author.id);",
							"        if (event.requestModeration) {",
							"            const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);",
							"        }",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"action\" : \"PUBLISH_COMMENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "100000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление статуса у комментария в состоянии отличном от  PENDING",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const author = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"authorId\", author.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, author.id);",
							"        if (event.requestModeration) {",
							"            const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);",
							"        }",
							"        const comment = await api.addComment(author.id, event.id, {\"text\": \"Новый комментарий\"});",
							"        pm.collectionVariables.set(\"commentId\", comment.id);",
							"",
							"        const publishedComment = await api.publishComment(comment.id, {\"action\": \"PUBLISH_COMMENT\"});",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"action\" : \"PUBLISH_COMMENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление статуса у комментария на событие",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const author = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"authorId\", author.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set(\"eid\", event.id);",
							"",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, author.id);",
							"        if (event.requestModeration) {",
							"            const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);",
							"        }",
							"        const comment = await api.addComment(author.id, event.id, {\"text\": \"Новый комментарий\"});",
							"        pm.collectionVariables.set(\"commentId\", comment.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"action\" : \"PUBLISH_COMMENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/comments?eventId=\" + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async publishComment(commentId, status, verbose=null) {",
					"        return this.patch(\"/admin/comments/\" + commentId, status, \"Ошибка при публикации комментария: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getRequiredModerationEvent(categoryId, requestModeration) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: requestModeration,",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getComment(comment) {",
					"        return {",
					"            text: comment",
					"        }",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "authorId",
			"value": "1"
		},
		{
			"key": "commentId",
			"value": ""
		}
	]
}